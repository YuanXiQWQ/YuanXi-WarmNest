public class Liskov {

    public static void main(String[] args) {
        A a = new A();
        // 11 - 3 = 8
        System.out.println("11-3=" + a.func1(11, 3));
        // 1 - 8 = -7
        System.out.println("1-8=" + a.func1(1, 8));

        System.out.println("--------------------");
        B b = new B();
        // 本应是 11 - 3 = 8, 由于重写了func1, 变成了 11 + 3 = 14
        System.out.println("11-3=" + b.func1(11, 3));
        // 本应是 1 - 8 = -7, 由于重写了func1, 变成了 1 + 8 = 9
        System.out.println("1-8=" + b.func1(1, 8));
        // 11 + 3 + 9 = 23
        System.out.println("11+3+9=" + b.func2(11, 3));
    }
}

// 创建一个更加基础的类
class Base {
    public int func1(int a, int b)
    {
        return a - b;
    }
}

// 返回两个数的差
class A extends Base {
    @Override
    public int func1(int a, int b)
    {
        return super.func1(a, b);
    }
}

// 继承了A, 增加一个新功能: 完成两个数相加, 然后再加9
class B extends Base {
    // 如果 B 想使用 A 的方法, 可以使用组合关系
    private A a = new A();

    @Override
    public int func1(int a, int b)
    {
        return a + b;
    }

    public int func2(int a, int b)
    {
        return func1(a, b) + 9;
    }
}