/* CSS排版有些困难,本页面请不要使用Shift+Alt+F格式化 */

/* 插入CSS的方法*/
/* 外部CSS
        HTML表达方式:在<head>标签中加入 <link rel="stylesheet" href="CSS链接">
        CSS表达方式:在链接对应位置放一个,css文件
    */

/* 内部CSS
        HTML表达方式:在<head>标签中加入 <styles>
        CSS表达方式:在HTML <styles>标签中放入CSS代码
    */

/* 内联CSS(已过时)
    HTML表达方式:在元素后面添加sytle属性 <元素 styles="CSS代码">
    */

/* 定义冲突: 对同一个选择器定义了不同的样式 */
/* 外部定义冲突: 对外部CSS文件中的定义冲突,将显示后读取的值 */
h1 {
    color: black;
    /* 对应下面的h1选择器,字体最终会是白色而不是黑色 */
}

/* 内部与外部定义冲突: 对HTML内通过<styles>定义的样式与外部定义冲突,将使用外部的样式的值 */

/* 内联CSS: 对任何定义有冲突, 将显示内联样式的值 */

/* 优先级: 内联定义 > 外部后定义 > 外部先定义 > 内部定义 > 浏览器默认定义*/

/* CSS语法 */
h1 {
    /* 元素选择器 */
    color: #ffffff;
    /* 声明,分号结尾 */
    background-color:
        /* 声明的属性 */
        #5ea3ef;
    /* 属性的值 */
}

/* CSS元素选择器 */
/* 用于"查找"或者选择需要样式化的HTML元素
        类别:
        简单选择器(Simple Selector):根据名称/id/类选择元素
        组合选择器(Complex Selector):根据选择器组合选择元素
        伪类选择器(Pseudo-Selector):根据特定状态选择元素
        伪元素选择器(Pseudo-Element):选择和样式化元素的一部分
        属性选择器(Attribute Selector):根据元素的属性或属性值选择元素
    */

/* 简单选择器 */
/* 元素选择器
       根据元素名称选择HTML元素
       CSS表达方式:直接输入元素名称
    */
h1 {
    text-align: center;
    font-size: 50px
}

/* id选择器
       根据id选择HTML元素
       元素的id在页面中是唯一的,所以id选择器用于选择唯一的元素
       不能以数字开头
       HTML表达方式: id="元素id"
       CSS表达方式: #元素id
    */
#idExample {
    color: violet;
    text-align: center;
}

/* 类选择器
       选择具有特定类属性的HTML元素,可以拥有多个类,同引号内使用空格隔开
       不能以数字开头
       HTML表达方式: class="类名"
       CSS表达方式: .类名
    */
.centreandColour {
    text-align: center;
    color: #bd7fff;
}

/* 指定元素的类选择器
       只针对特定元素的类选择器
       HTML表达方式: class="类名"
       CSS表达方式: 元素.类名
    */
span.specifyExample {
    color: cyan;
    font-size: 20px;
}

/* 通用选择器
       选择页面上的所有HTML元素,通常用于重置浏览器默认的样式
       HTML表达方式: 不需要表达
       CSS表达方式: *
    */
* {
    font-size: 20px;
}

/* CSS分组选择器 */
/* 选择器可以同时选择多个元素,使用逗号隔开 */

/* CSS声明 */
/* color颜色 */
/* 颜色值的表示方式
       标准色:叫得出名字的色
       十六进制:以#开头,六位十六进制数组成,每两位表示一个RGB颜色值
       简写十六进制: 以#开头,三位十六进制数组成,每一位表示一个RGB颜色值,用于简写三个RGB值的两位十六进制数都相同的情况(如#ffcc99可以简写为#fc9)
       RGB: rgb(红色值,绿色值,蓝色值)
       RGBA: rgba(红色值,绿色值,蓝色值,透明度)
       HSL: hsl(色相, 饱和度%, 亮度%)
       HSLA: hsla(色相, 饱和度%, 亮度%, 透明度)
    */
#colour {
    color: tomato;
    /* 标准色 */
    color: #ff6347;
    /* 十六进制 */
    color: rgb(255, 99, 71);
    /* RGB */
    color: rgba(255, 0, 0, 0.5);
    /* RGBA */
    color: hsl(9, 100%, 64%);
    /* HSL */
    color: hsla(9, 100%, 64%, 0.5);
    /* HSLA */
}

/* 属性 */
/* background背景属性 */
#background {
    background-color: yellow;
    /* 背景颜色 */
    background-image: url("../images/Elaina.png");
    /* 背景图片 */
    background-repeat: no-repeat;
    /* 背景图片是否重复, no-repeat为不重复, repeat为重复,默认水平重复, repeat-y为垂直重复 */
    background-attachment: fixed;
    /* 背景是否随着页面滚动, fixed固定, scroll滚动 */
    background-position: center;
    /* 背景位置 */
    background-size: 100px 100px;
    /* 背景大小 */
    background-blend-mode: multiply;
    /* 背景混合模式 */
    background: yellow, url("../images/Elaina.png"), no-repeat, fixed, center, 100px 100px, multiply;
    /* 背景简写,顺序为:背景颜色,背景图片,背景是否重复,背景是否随着页面滚动,背景位置,背景大小,背景混合模式 */
    opacity: 0.5;
    /* 子元素透明度,可能会导致完全透明的元素内的文本难以阅读 */
}

/* border边框属性 */
#border {
    /* 一般的边框属性一共有四个值,分别对应上边框,右边框,下边框,左边框 */
    border-width: 10px;
    /* 边框宽度 */
    border-style: solid;
    /* 边框样式, solid为实线, dashed为虚线, dotted为点状, double为双线, groove为凹槽, ridge为凸槽, inset为内阴影, outset为外阴影, none为无, hidden为隐藏。*/
    border-color: red;
    /* 边框颜色 */
    border: 10px solid red;
    /* 边框简写,作用于四个边,顺序为:边框宽度,边框样式,边框颜色 */
    border-radius: 10px;
    /* 边框圆角 */

    /* 也可以分别指定边框的四个边,同样适用简写 */
    border-top-style: solid;
    /* 上边框 */
    border-right-style: solid;
    /* 右边框 */
    border-bottom-style: solid;
    /* 下边框 */
    border-left-style: solid;
    /* 左边框 */
    border-top: 10px solid red;
    /* 上边框简写 */
}

/* CSS盒模型
        ╒═══════════════════════════════════════════════════════╕
        ║                     Margin边距                        ║
        ║     ╒═══════════════════════════════════════════╕     ║
        ║     ║               Border边框                  ║     ║
        ║     ║     ╒═══════════════════════════════╕     ║     ║
        ║     ║     ║         Padding填充           ║     ║     ║
        ║     ║     ║    ╒════════════════════╕     ║     ║     ║
        ║     ║     ║    ║    Content内容     ║     ║     ║     ║
        ║     ║     ║    ╘════════════════════╛     ║     ║     ║
        ║     ║     ║                               ║     ║     ║
        ║     ║     ╘═══════════════════════════════╛     ║     ║
        ║     ║                                           ║     ║
        ║     ╘═══════════════════════════════════════════╛     ║
        ║                                                       ║
        ╘═══════════════════════════════════════════════════════╛
        */
/* 详见../images/CSS盒模型.png
       CSS盒模型中的四个属性:width、height、margin、padding
       Content是盒子中的内容,包括文字和图片的显示
       Padding是填充,用来清除内容周围的区域,是透明的
       Border是边框,用来控制元素的边框
       Margin是边距,用来控制内容与周围元素的距离,是透明的
       margin属性和padding基本相同,这里以margin为例 
    */
/* margin边距属性 */
#margin {
    /* 在元素周围创建空白,用于控制元素与周围元素的距离,可以为负 */
    /* 属性的值: auto自动边距, 输入长度和单位指定边距, 用百分比%以包含元素的宽度的百分比为表示, inherit使边距继承父元素的边距 */
    margin-top: 10px;
    /* 上边距 */
    margin-right: 10px;
    /* 右边距 */
    margin-bottom: 10px;
    /* 下边距 */
    margin-left: 10px;
    /* 左边距 */
    margin: 10px;
    /* 上下左右边距 */
    margin: 10px 20px;
    /* 上下边距,左右边距 */
    margin: 10px 20px 30px;
    /* 上边距,左右边距,下边距 */
    margin: 10px 20px 30px 40px;
    /* 上边距,右边距,下边距,左边距 */
}

/* 边距的叠加 */
h1#margin {
    margin: 0 0 50px 0;
}

h2#margin {
    margin: 0 0 20px 0;
}

/* 看起来h1和h2的上下边距应该是70px(50px+20px),但实际上是50px(两者之间的最大值) */

/* CSS高度和宽度 */
/* 定义了元素(盒模型中的Content内容)的高度和宽度 */
#height-width {
    width: 100px;
    /* 宽度 */
    height: 100px;
    /* 高度 */
    max-width: 500px;
    /* 最大宽度 */
    max-height: 500px;
    /* 最大高度 */
}

/* 元素周围的空间总长/宽度应该是: 
       上下:内容高度 + 上+下填充高度 + 上+下边框高度
       左右:内容宽度 + 左+右填充宽度 + 左+右边框宽度
    */

/* outline轮廓属性 */
/* outline看起来和border差不多,但是
       1.outline不属于盒模型,不占据额外的空间,更像是“浮”在页面布局上的
       2.outline位于border外面
       3.border参与盒模型的计算,会影响元素的总尺寸,outline则不会
    */
/* 定义方式跟border一样 */
/* 轮廓偏移 */
#outline {
    outline-offset: 15px;
    /* 在元素的轮廓和边框之间添加间距,这段空间是透明的 */
}

/* CSS文本 */
#text {
    color: violet;
    /* 文本颜色 */
    text-align: center;
    /* 文本对齐方式,left左对齐,center居中对齐,right右对齐,justify两端对齐 */
    text-align-last: justify;
    /* 文本最后一行对齐(真的只有最后一行) */
    direction: ltr;
    /* 文本方向,ltr从左到右,rtl从右到左,ttb从上到下,btt从下到上,auto自动*/
    vertical-align: baseline;
    /* 垂直对齐,baseline基线对齐,sub下标对齐,super上标对齐,text-top文本顶部对齐,text-bottom文本底部对齐,也可以作用于图像*/
    text-decoration-line: underline;
    /* 文本装饰,underline下划线,overline上划线,line-through删除线,none无装饰,可以叠加,空格隔开 */
    text-decoration-color: #5ea3ef;
    /* 文本装饰颜色 */
    text-decoration-style: solid;
    /* 文本装饰样式 */
    text-decoration-thickness: 5px;
    /* 文本装饰厚度 */
    text-decoration: underline red double 5px;
    /* 文本装饰简写,顺序为line,colour,styles,thickness;ine位置(第一个位置)是必填的,其它可选 */
    text-decoration: none;
    /* 可以去掉超链接的下划线 */
    text-transform: capitalize;
    /* 文本大小写转换,uppercase大写,lowercase小写,capitalize首字母大写 */
    text-indent: 50px;
    /* 文本首行缩进(就是打word文档时每一段要按的两下TAB) */
    letter-spacing: 5px;
    /* 字符间距,可以为负值 */
    word-spacing: 10px;
    /* 词间距 */
    line-height: 0.8;
    /* 行间距 */
    white-space: nowrap;
    /* 指定元素内部的空白字符处理方式,normal是默认值,文本自动换行,连续的多个空白字符会被合并成一个;nowrap会取消自动换行,合并空白字符,pre不自动换行,保留连续空白字符;pre-wrap自动换行,保留连续空白字符;break-spaces保留连续空白字符,行尾空格会被保留 */
    text-shadow: 2px 2px 2px violet;
    /* 文本阴影,第一个值为x方向阴影长度，第二个值为y方向阴影长度，第三个值为模糊半径，第四个值为阴影颜色 */
    font-family: Arial, Helvetica, sans-serif;
    /* 字体,名称超过一个单词时应该用引号括起来;第二和第三个是备用字体,以防浏览器无法使用第一个字体 */
    font-style: italic;
    /* 字体样式 */
    font-weight: bold;
    /* 字体粗细 */
    font-variant: small-caps;
    /* 字体变体,将小写字母转换为小的大写字母 */
    font-size: 1em;
    /* 1em=16px=默认大小 */
    /* 字体大小(em=像素/16,使用em可以方便用户在浏览器菜单中调整文本大小，vm=视口宽度,文本将会随着浏览器窗口的大小变化) */
    font: 20px Arial, sans-serif;
    /* 全部属性简写，font:font-styles font-variant font-weight font-size/line-height font-family; font-size: 20px;*/
}

/* CSS链接 */
a {
    color: #5ea3ef;
    /* 链接颜色 */
    text-decoration: none;
    /* 链接装饰，none无装饰,underline下划线,overline上划线,line-through删除线,none无装饰,可以叠加,空格隔开 */
}

/* 四种链接状态 */
a:link {
    /* 未访问的链接 */
    color: #5ea3ef
}

a:visited {
    /* 已访问的链接 */
    color: #ca78d1;
}

a:hover {
    /* 鼠标指针移动到链接上 */
    color: #bd7fff;
}

a:active {
    /* 鼠标点击激活链接 */
    color: #8800ff;
}

/* 指针悬停光标属性 */
/*  styles="cursor:auto"自动
        styles="cursor:crosshair"十字光标
        styles="cursor:default"默认光标
        styles="cursor:help"帮助光标(默认光标的右下角加个问号)
        styles="cursor:move"移动光标(十字箭头)
        styles="cursor:n-resize"上下调整大小光标(上下箭头)
        styles="cursor:s-resize"上下调整大小光标(上下箭头)
        styles="cursor:e-resize"左右调整大小光标(左右箭头)
        styles="cursor:w-resize"左右调整大小光标(左右箭头)
        styles="cursor:ne-resize"右上角调整大小光标(右上左下箭头)
        styles="cursor:se-resize"右下角调整大小光标(右上左下箭头)
        styles="cursor:nw-resize"左上角调整大小光标(左上右下箭头)
        styles="cursor:sw-resize"左下角调整大小光标(左上右下箭头)
        styles="cursor:pointer"小手指光标
        styles="cursor:text"输入文本时的样式
        styles="cursor:wait"等待光标(蓝色圆圈)
        styles="cursor:progress"加载光标(默认光标右边加个蓝色圆圈)
    */

/* CSS列表 */
ul {
    list-style-type: none;
    /* 列表项标记,none无标记,circle圆形标记,square方形标记,disc圆点标记, */
    margin: 0;
    padding: 0;
    /* 列表还具有默认的边框和填充,如果希望删除列表项的默认设置,不要忘记删除这两个属性 */
}

ol {
    list-style-type: decimal;
    /* 列表项标记,decimal数字,lower-roman罗马数字,upper-roman罗马大写,lower-alpha字母小写,upper-alpha字母大写 */
}

ul {
    list-style-image: url(../images/YuanXi.ico);
    /* 列表项标记图片 */
}

ul {
    list-style-position: outside;
    /* 列表项标记位置，默认为outside在列表项之外; inside表示在列表项内部,将会成为文本的一部分*/
}

ul {
    list-style: square inside url("../images/YuanXi.ico");
    /* 列表项标记简写, 顺序为:列表项标记类型,列表项标记位置,列表项标记图片 */
}

/* CSS表格 */
table,
th,
td {
    border: 1px solid;
    /* 表格边框，1px实线，solid实线，dashed虚线，dotted点状虚线，double双线，inset内阴影，outset外阴影 */
    width: 100%;
    /* 表格宽度 */
    height: 70px;
    /* 表格高度 */
    border-collapse: collapse;
    /* 表格边框是否合并，collapse表示合并，separate表示不合并 */
}

th,
td {
    text-align: center;
    /* 表格文本对齐方式，left左对齐，center居中对齐，right右对齐，justify两端对齐 */
    vertical-align: middle;
    /* 垂直对齐，baseline基线对齐，sub下标对齐，super上标对齐，text-top文本顶部对齐,text-bottom文本底部对齐，也可以作用于图像*/
    padding: 15px;
    /* 表格内容与边框的间隔 */
    border-bottom: 1px solid #ddd;
    /* 只定义下边框实现水平分割线效果 */
}

tr:hover {
    /*使用选择器选择悬停的行，hover是鼠标悬停时触发的事件*/
    background-color: #bd7fff;
    /* 鼠标悬停时的背景色 */
}

tr:nth-child(even) {
    /*使用选择器选择偶数行, nth-child(偶数)*/
    background-color: #8800ff;
    /* 行索引为偶数时的背景色 */
}

/* 响应式表格
        属性 styles="overflow-x:auto;" 可以让表格在宽度超出时显示水平滚动条(-y是垂直),可以使用带属性的 div 元素把table元素包起来
    */

/* CSS布局 */
/* display属性 */
p {
    display: block;
    /* 块元素默认都是display:block,内联元素默认都是display:inline,display属性可以改变这些元素的布局模式 */
    display: inline;
    /* 在行内显示 */
    display: inline-block;
    /* 在行内显示，但是允许设置元素的宽度和高度,常见用途是将列表项水平显示而不是垂直显示,详见下面示例: */
    display: none;
    /* 通常与JavaScript配合使用,用于隐藏与显示元素 */
    visibility: hidden;
    /* 隐藏元素,与display:none不同，visibility属性只影响元素的可见性,元素的位置仍然保留;
        display:none会直接移除元素的位置,后面的元素会跟着向前缩进 */
}

.nav {
    background-color: yellow;
    list-style-type: none;
    text-align: center;
    padding: 0;
    margin: 0;
}

.nav li {
    display: inline-block;
    font-size: 20px;
    padding: 20px;
}

/* width和max-width属性 */
p {
    width: 500px;
    margin: auto;
    /* 块级元素会尽可能占据可用的全部宽度(向右延伸),设置块级元素的宽度可以防止它延伸到容器边缘 */
}

p {
    max-width: 500px;
    /* 设置最大宽度对于网站在小屏幕设备上的显示效果非常重要，超过宽度会自动换行 */
}

/* position属性 */
div.static {
    position: static;
    /* 静态定位:没有任何特殊方式定位,总是根据页面的正常流程定位 */
    position: relative;
    left: 30px;
    /* 相对定位:相对于其正常位置定位，可以设置偏移 */
    position: fixed;
    /* 固定定位:相对于浏览器窗口定位,即使页面滚动也不会改变位置 */
    position: absolute;
    /* 绝对定位:相对于其正常位置定位，不会随页面滚动而改变位置 */
    position: sticky;
    /* 粘性定位:先在视口中相对定位,直到达到给定的偏移位置,然后固定在原位 */
}

/* z-index属性 */
div {
    position: relative;
    z-index: 1;
    /* z-index属性设置元素的堆叠顺序，数字越大，堆叠顺序越靠后 */
}

/* overflow属性 */
div {
    overflow: visible;
    /* 默认,溢出内容不被裁剪,内容会在元素框外可见 */
    overflow: hidden;
    /* 当内容溢出时，溢出内容将被裁剪,剩余内容不可见 */
    overflow: scroll;
    /* 当内容溢出时，溢出内容将被裁剪, 但是会添加一个滚动条来查看剩余内容*/
    overflow: auto;
    /* 当内容溢出时，浏览器会显示滚动条，当内容不溢出时，浏览器不会显示滚动条 */
}

/* float属性 */
/* 用于定位和格式化内容,最初设计是为了实现文字环绕图像的效果,但也可以用作更多布局设计 */
p {
    float: left;
    /* 元素浮动到容器的左侧 */
    float: right;
    /* 元素浮动到容器的右侧 */
    float: none;
    /* 默认,元素不浮动 */
    float: inherit;
    /* 元素继承父元素浮动的方式 */
    /* 效果:当元素被设置为浮动时,会脱离常规的文档流,并且可以使文本和内联元素环绕它 */
}

/*  float属性的问题
        因为浮动元素脱离了文档流,所以它们可能不会被父元素计算在内,导致父元素高度坍塌
        解决方法：
        1. 清除浮动，在浮动元素之后的元素上使用 clear 属性
        2. 在父元素上使用 overflow:auto; 属性或者 overflow:hidden;
        3. 使用 clearfix 技巧
        4. 使用 Flexbox 和 Grid 避免使用float
    */

/* clear属性 */
/* 用于控制元素是否应该移动到浮动元素的侧面,或者说用于清除浮动的影响 */
p {
    clear: none;
    /* 默认,元素被允许出现在浮动元素旁边 */
    clear: left;
    /* 元素必须出现在任何左浮动元素的下面 */
    clear: right;
    /* 元素必须出现在任何右浮动元素的下面 */
    clear: both;
    /* 元素必须出现在左右任何浮动元素的下面 */
    clear: inherit;
    /* 元素继承父元素浮动\\clear属性的值 */
    /* 链接https://www.w3schools.com/css/css_float_examples.asp有一些浮动来并排显示图像的示例 */
}

/*  clearfix
        是一个流行的CSS技巧,用于解决 float 的问题,允许父元素正确地包围和包含其浮动的子元素
        最常见的 clearfix 用法是使用伪元素(::after) 和 clear 属性.这种方法不需要在HTML中添加额外的标记,因此干净易维护
    */
/*  clearfix 使用方法:
        将 clearfix 类应用于需要清除浮动影响的父元素
    <div class="clearfix">
        <!-- 浮动元素 -->
    </div>
    */
.clearfix::after {
    content: "";
    display: table;
    clear: both;
    /*  通过 content: ""; 创建一个伪元素,这个伪元素是块级元素(display:table;)
            应用 clear: both; 在伪元素上,将会清除前面的任何浮动,确保父元素能够包含所有浮动的子元素
        */
}


/* CSS组合器 */
/*  包含:
        后代选择器      A   B:   选择所有位于 A 元素内部的B元素,无论 B 元素嵌套得有多深
        子选择器        A > B:   选择所有作为 A 元素直接子元素的 B 元素
        相邻兄弟选择器  A + B:   选择紧接在 A 元素之后的第一个 B 元素
        通用兄弟选择器  A ~ B:   选择所有与 A 元素具有相同父元素的 B 元素,并且在 A 元素之后
    */
/* 后代选择器 */
div p {
    color: red;
    /* 将会选择所有位于 div 元素内部的 p 元素(包括嵌套的 p 元素) */
    /* 可以选择某个元素内部的所有特定元素,而不考虑它们之间的嵌套深度 */
}

/* 子选择器 */
div>p {
    color: blue;
    /* 将会选择所有作为 div 直接子元素的 p 元素(不包括嵌套的 p 元素) */
    /* 相比于后代选择器更加严格,只选择直接子元素 */
}

/* 相邻兄弟选择器 */
div+p {
    color: green;
    /* 将会选择所有紧跟在 div 元素之后的第一个 p 元素 */
}

/* 通用兄弟选择器 */
div~p {
    color: yellow;
    /* 将会选择所有与 div 元素具有相同父元素,并且在 div 元素之后的所有 p 元素 */
}

/* CSS伪类 */
/*  CSS特性,用于定义元素的特殊状态
        与类选择器不同,伪类不需要添加额外的代码到HTML元素上,而是根据元素状态(如鼠标悬停,获得焦点等)来应用样式
    */
/*  常见的伪类
        :hover  鼠标悬停
        :focus  获得焦点
        :active 点击
        :first-child  选择父元素的第一个子元素
        :last-child  选择父元素的最后一个子元素
        :nth-child(n)  选择父元素的第n个子元素
        :lang()  选择带有指定语言的元素
    */
a:hover {
    color: red;
    /* 鼠标悬停时超链接变成红色 */
}

input:focus {
    background-color: lightyellow;
    /* 当元素获得焦点时,背景变成蛋黄(不是) */
}

a:active {
    color: blue;
    /* 当用户点击或者激活超链接元素的时候,超链接变成蓝色 */
}

p:first-child {
    font-weight: bold;
    /* 让父元素的第一个段落文本加粗 */
}

li:nth-child(2) {
    color: green;
    /* 让第二个子元素的文本变成绿色 */
}

p:lang(en) {
    font-family: Arial, Helvetica, sans-serif;
    /* 让所有带有英文的段落使用Arial字体 */
}

/*  为什么使用伪类:
        伪类使得不必为了改变元素状态二区修改HTML结构或者使用JavaScript.
    */

/* CSS伪元素 */
/*
        伪元素用于指定页面上的某个元素部分,以便对其应用特定的样式,可以被看作是选择器的一种.
        允许样式化一个元素的特定部分,而不需要为了样式化目的而添加额外的HTML标记.
    */
/*  常见的伪元素
        ::before  在元素之前插入内容
        ::after  在元素之后插入内容
        ::first-letter  用于选择并样式化元素第一个字母,常用语设置段落的首字母样式
        ::first-line  用于选择并样式化元素的第一行文本,鲳鱼与设置段落首行的字体与对齐方式
        ::selection  用于改变被用户选中文本的样式
    */
p::before {
    content: "注意：";
    font-weight: bold;
    /* 用于在元素之前插入内容 */
}

p::first-letter {
    font-size: 200%;
    color: red;
    /* 将段落第一个字母放大两倍并变成红色 */
}

p::first-line {
    font-weight: bold;
    font-size: 110%;
    /* 将段落第一行文本加粗并放大 */
}

p::selection {
    color: white;
    background: black;
    /* 将被用户选中的文本变成黑底白字 */
}

/*  伪元素的注意事项:
        1. 使用两个冒号与伪类区分
        2. 伪元素::before 和伪元素::after 创建的内容不会出现在DOM中,因此不能通过JavaScript直接访问.该元素主要用于装饰目的,不应该用于添加重要的内容
        3.由于伪元素实际上不是HMCL文档结构的一部分,它们不能被赋予任何交互行为(如点击事件或鼠标悬停事件)
    */
/*  伪类与伪元素的区别:
        伪类(:hover, :focus等)用于定义元素的特定状态
        伪元素(::before, ::after等)用于创建元素中的部分,可以在不添加额外HTML元素的情况下,在文档的样式信息中添加内容或样式
    */

/* CSS透明度: opacity属性 */
p {
    opacity: 0.5;
    /* 0.5为不透明度,0为完全透明,1为完全不透明 */
}

p:hover {
    opacity: 1.0;
    /* 通常与:hover一起使用,以在鼠标悬停时改变不透明度
    本例中 p 元素将在平时半透明,鼠标悬停时不透明 */
}

/* 当为元素背景使用 opacity 时,所有子元素都会继承相同的透明度,可能会导致文本难以阅读 */

/* CSS导航栏 */
/* 标准的导航栏就是一个列表,因此会是这样:
    <ul>
    <li><a href="default.asp">Home</a></li>
    <li><a href="news.asp">News</a></li>
    <li><a href="contact.asp">Contact</a></li>
    <li><a href="about.asp">About</a></li>
    </ul>
    */

/* 垂直导航栏示例: */
ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
    width: 200px;
    background-color: #bd7fff;
    /* 从列表中去除项目符号,边距和填充 */
}

li a {
    display: block;
    color: #ff6347;
    padding: 8px 16px;
    text-decoration: none;
    /* 将列表项中的超链接元素转换为块级元素,这样点击整个块就可以跳转,不必点击文字 */
}

li a:hover {
    background-color: #8800ff;
    color: white;
    /* 鼠标悬停时的背景色和文本颜色 */
}

.active {
    background-color: #04aa6d;
    /* 当前界面的导航颜色(让用户知道他在哪个页面) */
}

ul {
    position: fixed;
    left: 0;
    width: 25%;
    height: 100%;
    overflow: auto;
    /* 固定导航栏于页面左侧 */
}

/* 水平导航栏示例 */
ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
    overflow: hidden;
    /* 当溢出时隐藏 */
    background-color: #333;
}

li {
    float: left;
    /* 将列表项目设定为从左侧浮动 */
}

li a {
    display: block;
    color: white;
    text-align: center;
    padding: 14px 16px;
    text-decoration: none;
    /* 将列表中的超链接元素转换为块级元素并移除下划线 */
}

li a:hover {
    background-color: #111;
    /* 鼠标悬停时的背景色 */
}

.active {
    background-color: #04aa6d;
    /* 当前界面的导航颜色 */
}

ul {
    position: fixed;
    top: 0;
    width: 100%;
    /* 固定导航栏于页面顶部 */
}

ul {
    position: sticky;
    top: 0;
    /* 或者定义一个粘性导航栏 */
}

/* CSS属性选择器 */
/*  根据元素的属性及其值来选择元素,使用[]把要匹配的属性名称括起来表示
        分为:
        存在和值属性选择器
        [属性 n ]:           选择包含 n 属性的所有元素,无论值是什么
        [属性 n ="value"]:   选择 n 属性的值完全等于 value 的所有元素
        [属性 n ~="value"]:  选择 n 属性的值为一系列空格分隔的值之一, 且其中一个值等于 value 的所有元素
        子串值属性选择器
        [属性 n |="value"]:  选择 n 属性的值是 value 或以 value- 开头的所有元素,常用语语言代码的匹配
        [属性 n ^="value"]:  选择 n 属性的值是以 value 开头的所有元素
        [属性 n $="value"]:  选择 n 属性的值是以 value 结尾的所有元素
        [属性 n *="value"]:  选择 n 属性的值中包含子字符串 value 的所有元素
    */
a[target] {
    color: red;
    /* 将所有有定义了打开链接方式的超链接元素设置为红色 */
}

div[class="button"] {
    padding: 10px;
    /* 将所有 class 属性值仅有 button 的 div 元素设置内边距 */
}

div[class~="button"] {
    padding: 10px;
    /* 将所有 class 属性值包含 button 的 div 元素设置内边距 */
}

img[src$=".png"] {
    border: 1px solid black;
    /* 将所有.png后缀的图片元素设置边框 */
}

div[data-info*="main"] {
    background-color: #04aa6d;
    /* 将所有 data-info 属性值字段中包含 main 的 div 元素设置背景 */
}

/*  |=与 ^=的区别: 
    |=仅匹配匹配值或以匹配值和"-"开头的字段
    ^=匹配所有以匹配值开头的字段
*/
/*  ~=与 *= 的区别:
    ~=仅匹配被空白分隔的单词,较为具体
    *=匹配包含匹配字段的所有字段,较为广泛
*/

/* CSS表单 */
input[type="text"] {
    width: 100%;
    /* 文本输入框的宽度 */
    padding: 12px 20px;
    /* 文本输入框的内边距 */
    margin: 8px 0;
    /* 文本输入框的外边距 */
    box-sizing: border-box;
    /* 将默认CSS盒模型content-box改为border-box,元素的宽度不再包括外边距,使计算更加简单直观 */
    border: 2px solid red;
    /* 文本输入框的边框 */
    border-radius: 4px;
    /* 文本输入框的圆角 */
    background-color: #bd7fff;
    /* 文本输入框的背景 */
    color: #ffffff;
    /* 文本输入框的字体颜色 */
}

input[type=password] {
    border: none;
    border-bottom: 2px solid red;
    /* 只保留底边框,样式为填空线 */
}

input[type=password]:focus {
    background-color: #ddd;
    /* 聚焦时的背景色 */
}

/* 给搜索框添加放大镜图标 */
input[type=text] {
    background-color: white;
    background-image: url('../images/searchicon.png');
    /* 文本输入框的背景图片 */
    background-position: 10px 10px;
    /* 文本输入框的背景图片位置 */
    background-repeat: no-repeat;
    /* 文本输入框的背景图片是否重复 */
    padding-left: 40px;
    /* 文本输入框的内边距 */
}

/* 动画搜索输入框 */
input[type=text] {
    transition: width 0.4s ease-in-out;
    /* 过渡动画 */
}

input[type=text]:focus {
    width: 100%;
    /* 聚焦时的宽度 */
}

/* 样式化多行文本框 */
textarea {
    width: 100%;
    height: 150px;
    padding: 12px 20px;
    box-sizing: border-box;
    border: 2px solid #ccc;
    border-radius: 4px;
    background-color: #f8f8f8;
    resize: none;
    /* 不允许文本框改变(禁用默认的右下角拖拽图标) */
}

/* CSS计数器 */
/*  counter-reset：                 创建或重置计数器,指定计数器的名称和起始值，如果不指定起始值,默认为0
    counter-increment：             用于指定计数器的增量
    content:                        插入生成的内容
    counter()或者counters()方法:    将计数器的值添加到元素中
*/
body {
    counter-reset: section;
    /* 创建计数器section并重置为0 */
}

h2 {
    counter-increment: section;
    /* 每遇到一次h2元素,计数器section增加1 */
}

h2::before {
    content: "Section " counter(section) " : ";
    /* 在h2元素前增加计数器值 */
}

/* CSS网站布局 */
/*  一个网站通常分为头部,菜单,内容和页脚
                        Header标题
                    Navigation Menu导航菜单
    Content内容     Main Content主要内容    Content内容
                        Footer页脚
*/
/*  Header标题
    通常位于网站的顶部(或在顶部导航菜单的下方),通常包含一个标志或网站名称
*/
.header {
    background-color: #bd7fff;
    text-align: center;
    padding: 20px;
}

/*  Navigation Menu导航菜单
    导航栏包含一个链接列表,帮助访问者在网站上进行导航
*/
/*  The navbar container导航栏 */
.topnav {
    overflow: hidden;
    background-color: #bd7fff;
}

/*  Navbar links导航栏链接 */
.topnav a {
    float: left;
    display: block;
    color: #f2f2f2;
    text-align: center;
    padding: 14px 16px;
    text-decoration: none;
}

/*  Links - change color on hover导航栏链接的鼠标悬停状态 */
.topnav a:hover {
    background-color: #8800ff;
    color: white;
}

/* content内容 */
/* 创建一个三列布局 */
.column {
    float: left;
    width: 33.33%;
    /* 三列宽度 */
}

/* 清除列后的浮动 */
.row:after {
    content: "";
    display: table;
    clear: both;
}

/* 在较小布局下使三列堆叠在一起而不是并列 */
@media screen and (max-width: 600px) {
    .column {
        width: 100%;
    }
}

/* 创建一个两边窄中间宽的布局 */
.column {
    float: left;
}

/* 左右列 */
.cloumn.side {
    width: 25%;
}

/* 中间列 */
.column.middle {
    width: 50%;
}

/* 清除列后的浮动 */
.row:after {
    content: "";
    display: table;
    clear: both;
}

/* 在较小布局下使三列堆叠在一起而不是并列 */
@media screen and (max-width: 600px) {
    .column {
        width: 100%;
    }
}

/* 页脚 */
/* 位于页面底部,通常包含版权和联系信息 */
.footer {
    background-color: #bd7fff;
    text-align: center;
    padding: 10px;
}

/* CSS单位 */
/*  绝对长度:固定的长度,只会显示确切的大小
    cm: 厘米
    mm: 毫米
    in: 英尺=96px=2.54cm
    px: 像素=1/96英寸,对于低分辨率设备,1px等于显示器上的一个设备像素;对于打印机和高分辨率屏幕,1px表示多个设备像素.
    pt: 点=1/72英存
    pc: 派卡=12点≈1/6英寸
*/
/*  相对长度:指定相对于另一个长度属性的长度
    em:     相对于其父元素的字体大小:如果父元素的字体大小是16px,那么1em=16px
    ex:     相对于元素当前字体的"x-height",即小写字母"x"的高度
    ch:     相对于数字"0"的宽度
    rem:    相对于根元素(html)的字体大小:如果根元素的字体大小是16px,1rem=16px
    vw:     相对于视口宽度的百分比,1vm=视口宽度的1%
    vh:     相对于视口高度的百分比,1vh=视口高度的1%
    vmin:   相对于视口宽度和高度中较小的那个的百分比，1vmin=视口宽度和高度中较小的那个的1%
    vmax:   相对于视口宽度和高度中较大的那个的百分比，1vmax=视口宽度和高度中较大的那个的1%
    %:      相对于父元素的相应维度(宽度,高度等)的百分比
*/

/* CSS!important规则 */
/* 用于给属性/值添加比正常情况下更重要的优先级
通常用于不负责任,头痛医头脚痛医脚地修复屎山代码 */
p {
    color: red;
    /* 所有 p 元素的文本颜色都会变成红色 */
}

#p1 {
    color: blue;
    /* id="p1"的 p 元素的文本颜色都会变成蓝色,因为它具有更高的优先级 */
}

p {
    color: #bd7fff !important;
    /* 所有 p 元素的文本颜色都会变成紫色,包括 id="p1",因为现在通过 !important 给了 p 元素最高的优先级 */
}

/* CSS数学方法 */
/*  将数学表达式用作属性值,包括:
    calc()           执行一个计算并用结果作为属性值,参数可以使用 "+, -, *, /"
    max(a, b, ...)   使用参数中最大值作为属性值
    min(a, b, ...)   使用参数中最小值作为属性值
*/
#div1 {
    position: absolute;
    left: 50px;
    width: calc(100% - 100px);
    /* 将 100% 减去 100px 设置为宽度 */
    border: 1px solid blcak;
    background-color: #bd7fff;
    padding: px;
}

#div2 {
    background-color: yellow;
    height: 100px;
    width: max(50%, 300px);
    /* 当对内容进行 50% 缩放后太小看不清时(小于300px),设置宽度为 300px */
    width: min(50%, 300px);
}

/* CSS边框 */
/*  border-radius属性:定义了元素角落的半径(圆角)
    顺序:
    四个值: 左上，右上，右下，左下
    三个值: 左上,右上左下,右下
    两个值: 左上右下,右上左下
    一个值: 四个角

*/
#rcorners1 {
    border-radius: 25px;
    background: #73AD21;
    padding: 20px;
    width: 200px;
    height: 150px;
    /* 具有指定背景颜色的元素的圆角 */
}

#rcorners2 {
    border-radius: 25px;
    border: 2px solid #73AD21;
    padding: 20px;
    width: 200px;
    height: 150px;
    /* 具有边框的元素的圆角 */
}

#rcorners3 {
    border-radius: 25px;
    background: url(paper.gif);
    background-position: left top;
    background-repeat: repeat;
    padding: 20px;
    width: 200px;
    height: 150px;
    /* 具有背景图片的元素的圆角 */
}

/*  border-image属性:允许制订一张图片来替代元素周围的普通边框
    该属性有三个参数:
    border-image: url(图片链接) 切割位置 中间部分重复/拉伸
*/
#borderimg {
    border: 10px solid transparent;
    padding: 15px;
    border-image: url(../images/CSS盒模型.png) 30 round;
    /* 中间部分重复 */
    border-image: url(../images/CSS盒模型.png) 30 stretch;
    /* 中间部分拉伸 */
}

/*  background-image属性:背景图片,允许同时添加多个,要分别制定,逗号隔开*/
#backgroundimg {
    background-image: url(../images/CSS盒模型.png), url(../images/Elaina.png), url(../images/fox.png);
    background-repeat: repeat, no-repeat, no-repeat;
    background-position: center, left bottom, left top;
    background-size: contain, cover, 15px 15px;
    /* 背景图片大小
    contain:    将背景图像尽可能放大,保持纵横比,但是宽度和高度都会适应内容区域,可能会留部分空白
    cover:      将背景图像尽可能放大,保持纵横比,但是会覆盖全部背景区域,可能会有部分图像不可见
    */
    background-origin: border-box, padding-box, content-box;
    /* 背景图片位置(图像放置的起点)
    border-box:    背景图像从边框的左上角开始
    padding-box:   默认,背景图像从填充边缘的左上角开始
    content-box:   背景图像从内容的左上角开始
    */
    background-clip: border-box, padding-box, content-box;
    /* 背景绘制区域(背景的绘制区,图像会在这个区域内展示)
    border-box:    默认,背景绘制到边框的外边缘
    padding-box:   背景绘制到内边距的外边缘,不会到边框区域
    content-box:   背景绘制到内容的外边缘,不包括内边距和边框
    */
    background: url(../images/CSS盒模型.png) right bottom repeat, url(../images/Elaina.png) left bottom no-repeat;
    /* 背景图片简写 */
}

/* CSS颜色参数 */
#color {
    color: rgba(255, 99, 71, 0.5);
    /* RGBA颜色,透明度0为完全透明,1为完全不透明 */
    color: hsla(9, 100%, 64%, 0.5);
    /* HSL颜色, 色相是色轮上的读书(0-360?),饱和度100%表示完全的颜色,亮度0%表示黑色(全暗),100%表示白色, 透明度 */
    color: rgb(255, 0, 0)opacity(0.5);
    /* RGB颜色 + 透明度, 透明度0为完全透明,1为完全不透明 */
    background-color: transparent;
    /* transparent参数相当于设定rgba(0, 0, 0, 0) */
    border: 10px solid currentColor;
    /* currentColor参数像一个变量,保留着元素color属性的当前值(在这个位置是上面的rgb(255, 0, 0) */
    border: inherit;
    /* 从父级元素继承 */
}

/*  CSS渐变之色:在两种或更多指定的颜色之间显示平滑的过渡,在background-image中使用
    三种类型渐变:
    linear-gradient:    线性渐变,linear-gradient(方向(默认自上而下)/角度(单位deg), 颜色)
    radial-gradient:    径向渐变,radial-gradient(形状(默认椭圆), 大小, 颜色)
    conic-gradient:     锥形渐变,conic-gradient(开始角度(默认0), 方向, 颜色)
    至少需要两种颜色,其它若不写即默认或没有;支持各种颜色参数, 空格加百分比可以调整各个颜色的空间占比
*/
#gradients {
    background-image: linear-gradient(to right, #bd7fff, #eedffc);
    /* 从左到右线性渐变 */
    background-image: linear-gradient(45deg, #bd7fff, rgba(0, 0, 0, 0));
    /* 45度角线性渐变,深入淡出 */
    background-image: radial-gradient(circle, closet-side at 60% 55%, red, yellow, black)
        /* 径向渐变,最中心一侧大小为60%，最外面一侧大小为55% */
        conic-gradient(from 45deg, #bd7fff, rgba(0, 0, 0, 0));
    /* 锥形渐变,从45度角开始 */
}

/* CSS阴影效果 */
/*  为文本和元素添加阴影
    text-shadow:    给文本添加阴影,text-shadow: 水平阴影 垂直阴影 模糊半径 阴影颜色;
    box-shadow:     给元素添加阴影,box-shadow: 水平阴影 垂直阴影 模糊半径 扩散半径 阴影颜色 内部/外部;
*/
#shadow {
    color: coral;
    text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;
    /* 将会给文本添加沿着文字边缘绘制的文字边框 */
    box-shadow: 10px 10px 5px #888888 inset;
    /* 将会给元素添加沿着边框的阴影 */
}

/* CSS文本效果 */
/*  包括:
    text-overflow:    文本溢出时的处理
    write-mode:       文本写法
*/
#textEffects {
    text-overflow: ellipsis;
    /*  当文本溢出时显示省略号
        ellipsis: 用省略号显示
        clip: 直接截断
        none: 不显示
    */
    writing-mode: horizontal-tb;
    /*  文本写法为从上往下的垂直模式
        horizontal-tb: 
        vertical-rl: 
        vertical-lr: 
    */
}

#textEffects:hover {
    overflow: visible;
    /* 这样当鼠标悬停的时候就会显示全部文本 */
}

/* 响应式网页设计 */
/*  仅使用 HTML 和 CSS 完成,不是一个程序或者JavaScript
    可以使网页适配多种屏幕大小的设备
*/
/* 视口:用户在网页上可见的区域
HTML 中的 viewport:
<meta name="viewport" content="width=device-width, initial-scale=1.0">
width=device-width:  部分设置页面的宽度以适应设备的屏幕宽度
initial-scale=1.0:  部分设置页面首次加载时的初始缩放 */
/*  Grid View 网格视图:
    将页面分成列,使放置元素变得更容易
    通常有12列,总宽度为100%,在调整视口大小时会收缩和扩展
*/
/* Grid View 的构建: */
* {
    box-sizing: border-box;
    /* 确保所有HTML元素的 box-sizing 属性设置为 border-box, 这样可以确保填充和边框包含在元素的总宽度和高度中 */
}